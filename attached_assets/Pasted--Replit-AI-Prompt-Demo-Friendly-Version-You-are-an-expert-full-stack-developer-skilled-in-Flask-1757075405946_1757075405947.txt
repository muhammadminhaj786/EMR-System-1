ðŸš€ Replit AI Prompt (Demo-Friendly Version)

You are an expert full-stack developer skilled in Flask, jQuery, Bootstrap, and PostgreSQL.
Generate a Consent & Intake Form Module (demo version) that works locally in Replit.

ðŸŽ¯ Requirements
Frontend (HTML + Bootstrap + jQuery)

Drag-and-drop upload box (top-right corner) to upload PDF consent forms.

On upload â†’ send file to Flask backend via AJAX.

Show fake PDF preview (use placeholder image).

Send Modal

Fields: Patient Name, Email, Phone, Fax, Delivery Method (Email / SMS / Fax).

Submit via AJAX â†’ backend just logs action and stores in DB.

Tracking Tabs

Outgoing â†’ consents sent but not signed.

Received â†’ signed consents.

Table shows: patient name, form, sent date, received date, status.

History Table

Shows all transmission attempts (method + timestamp).

Backend (Flask)

Blueprints for modular routes:

/upload â†’ save uploaded PDF to uploads/ folder (instead of AWS S3).

/send â†’ log transmission in DB (instead of AWS SES/Pinpoint/Fax).

/track â†’ fetch consents + history.

/docuseal-callback â†’ simulate signature completion.

Database (SQLite for demo)

Consent: patient name, contact info, form name, file path, status, timestamps.

Transmission: method, recipient, status, timestamps (linked to Consent).

Docuseal Mock

Instead of real Docuseal, provide an endpoint /simulate-sign/<consent_id>

When called â†’ mark consent as signed, move from Outgoing â†’ Received, and copy file to signed/ folder.

Deliverables

Flask backend (organized with blueprints/, models/, services/).

Frontend (Bootstrap HTML + jQuery AJAX).

SQLite models (SQLAlchemy).

Simple README with run instructions.

A flow-diagram.md file using Mermaid.js to illustrate:

Upload flow (UI â†’ Flask â†’ local uploads/ + DB).

Send flow (UI â†’ Flask â†’ log transmission).

Signature flow (simulate via /simulate-sign â†’ DB + move file â†’ UI refresh).

Constraints

Keep code modular and clean.

Use AJAX for backend calls.

Store files locally (uploads/ and signed/) instead of AWS.

Use SQLite instead of Postgres for demo.

Provide at least 1â€“2 unit tests.

ðŸ’¡ Please generate the full project codebase:

Flask backend (blueprints, models, services).

Frontend templates + static files.

SQLite models.

Mocked AWS + Docuseal.

README + docs.

âœ… This should run locally in Replit with no AWS setup needed, but still follow the same architecture as the production design.